CSE132 Cover Page for Lab 5a

By submitting this assignment, you certify that you have read, 
understood, and complied with the CSE 132 Collaboration Policy.

Who worked on this lab?

     Last Name           Last 3 Digits of student's ID

1) Xie					614
2) Tang					630
3) Liu					497
4) Epstein				338

Tell us about your protocol:
 1 - hello response message (server to client)

    game version - 1 byte
    player number - 1 byte 

2 - advanced hello message (client to server)
	
	desired number of players - 1 byte
	name - UTF8 encoded string
	
3 - I want more cards (client to server)
	[no payload, but the server tells the model that you want to add cards]
	
4- Number of players needed to start game (server to client)

	Players left until game starts (Start game if this is zero) - 1 byte

5 - gamefield update message (server to clients)

    cards left in deck - 1 byte
    current field size - 1 byte
    cards - 4 bytes per card (index order of cards is referenced from the order in which they were sent from the server) 

6 - gameplayer update message (server to clients)

    number of players - 2 byte short
    per player: player number - 1 byte, length of player name - 2 bytes, player name - UTF8-encoded String 

7 - gamescore update message (server to clients)

    number of players - 2 byte short
    per player: player number - 1 byte, player score - 2-byte short 

13 - player calls set (client to server)

    player number - 1 byte 

14 - select cards (server to client)

    player number - 1 byte 

15 - set call (client to server)

    player number - 1 byte
    card index - 3 cards, 1 byte per card (index is specified in message type 5) 

17 - valid set (server to clients)

    winning player number - 1 byte 

18 - invalid set (server to clients)

    player number - 1 byte(if 0, ignore)
    reason - 1 byte (0 == ignore message, 1 == TIMEOUT, 2 == NOTASET)

60 - game over (server to clients)

    winning player number - 1 byte 

If there is anything else we should know about your work on this assignment, 
please explain here:

The client doesn't try to connect to the server until after you push start. It disconnects when the game ends.
It reconnects if you push start again.

The server listens for connections, and assigns a thread to listen to that specific client.
That thread will attempt to put the client in a game, using the GameQueuebe class. Once enough players
are gathered for the desired game size(the client specifies how many people it wants to play with), they
are added to the game and the game starts. the threads listen the client while the client is connected/the
game is running, and listens to the game using a PCS system so that it can update the client when  
changes occur. 

When a game ends, the client gets a popup saying who won, and is disconnected from the server. The client
is then returned to the start screen, and can join a new game.

You can't join an ongoing game, since that point advantage would be annoying.You can only join a game that
hasn't started yet. If you disconnect and try connecting again, you'll be put into a different game.

Refer to instructions.txt for more specific rules
